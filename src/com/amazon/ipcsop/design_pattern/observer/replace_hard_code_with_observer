用Observer替换硬编码的通知
 
意图：子类通过硬编码来通知另一个类的一个实例。
去除这些子类，并使其超类能够通知一个或多个实现了Observer接口的类。
 
动机：Observer模式的每次实现都会产生一个主题（作为通知源的类）与其观察者之间的松耦合
。Observer接口使这种松耦合成为可能。
想要接收新信息的通知，类只需实现Observer接口，并把自己注册到一个主题。
当发生改变时，主题会根据它所包含的实现了Observer接口的实例的集合依次通知这些实例。
 
优点和缺点：
＋使主题及观察者访问松散耦合。
＋支持一个或多个观察者。
－当硬编码的通知已经足够的时候，会增加设计的复杂度。
－当出项串联通知的时候，会增加代码的复杂度。
－当观察者没有从它们的主题中被删除的时候，可能会造成内存泄漏。
 
做法：
1、如果一个通知者代表它的接收者执行定制的行为，而不是执行单纯的通知逻辑，应用搬移到通知者的接收者中。
2、在接收者上应用提炼接口重构，只选择被它的通知者调用的方法，产生观察者接口。如果其他通知者会调用不在观察者接口中的方法，把这些方法添加到观察者接口中，这样它就可以支持所有接收者了。
3、使每个接收者都实现观察者接口。然后，使每个通知者都只通过观察者接口与它的接收者交互。
4、选择一个通知者，在其通知方法上应用上移方法重构。这包含上移通知者的观察者接口引用，以及设置引用的代码。
5、更新每个通知者的观察者，使它们注册到主题并与其交互，而不是通知者，然后删除通知者。
6、重构这个主题，使它包含观察者的一个集合，而不是仅仅一个观察者。